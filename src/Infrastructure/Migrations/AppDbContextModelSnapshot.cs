// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("plans", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PlanExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<int>("RestSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(90);

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("plan_exercises", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PlanSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlanExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<int>("SetNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlanExerciseId", "SetNumber")
                        .IsUnique();

                    b.ToTable("plan_sets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ScheduledExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RestSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(90);

                    b.Property<Guid>("ScheduledWorkoutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledWorkoutId");

                    b.ToTable("scheduled_exercises", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ScheduledSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<Guid>("ScheduledExerciseId")
                        .HasColumnType("uuid");

                    b.Property<int>("SetNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("Weight")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledExerciseId", "SetNumber")
                        .IsUnique();

                    b.ToTable("scheduled_sets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ScheduledWorkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("PlanId");

                    b.ToTable("scheduled_workouts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PlanExercise", b =>
                {
                    b.HasOne("Domain.Entities.Plan", "Plan")
                        .WithMany("Exercises")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Domain.Entities.PlanSet", b =>
                {
                    b.HasOne("Domain.Entities.PlanExercise", "PlanExercise")
                        .WithMany("Sets")
                        .HasForeignKey("PlanExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanExercise");
                });

            modelBuilder.Entity("Domain.Entities.ScheduledExercise", b =>
                {
                    b.HasOne("Domain.Entities.ScheduledWorkout", "ScheduledWorkout")
                        .WithMany("Exercises")
                        .HasForeignKey("ScheduledWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledWorkout");
                });

            modelBuilder.Entity("Domain.Entities.ScheduledSet", b =>
                {
                    b.HasOne("Domain.Entities.ScheduledExercise", "ScheduledExercise")
                        .WithMany("Sets")
                        .HasForeignKey("ScheduledExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduledExercise");
                });

            modelBuilder.Entity("Domain.Entities.ScheduledWorkout", b =>
                {
                    b.HasOne("Domain.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Domain.Entities.Plan", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Domain.Entities.PlanExercise", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Domain.Entities.ScheduledExercise", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Domain.Entities.ScheduledWorkout", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
